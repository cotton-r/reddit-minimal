{"version":3,"sources":["components/SearchBar/SearchBarSlice.js","components/SearchBar/SearchBar.js","app/Reddit.js","components/Comments/Comments.js","components/PostFooter/PostFooter.js","components/Post/Post.js","components/Subreddits/SubredditsSlice.js","components/SubredditsDropdown/SubredditsDropdown.js","components/PostsContainer/PostsContainer.js","components/Subreddits/Subreddits.js","redditlogo.png","components/PostsContainer/PostsContainerSlice.js","App.js","reportWebVitals.js","app/store.js","index.js"],"names":["SearchBarSlice","createSlice","name","initialState","reducers","changeActiveSearch","state","action","payload","actions","SearchBar","dispatch","useDispatch","searchBarValue","useSelector","search","activeSubSliced","subreddits","activeSubreddit","slice","id","className","value","placeholder","onChange","e","target","API_ROOT","getSubredditPosts","subreddit","a","fetch","response","json","data","children","map","post","getSubreddits","getPostComments","permalink","comment","Comments","props","useState","comments","setComments","useEffect","then","jsonComments","author","dateCalculator","created_utc","body","visible","created","dateDifferenceInTime","Date","now","dateDifferenceInMonths","dateDifferenceInDays","dateDifferenceInHours","dateDifferenceInMinutes","Math","round","PostFooter","active","setActive","commentsIcon","stroke","fill","strokeWidth","version","baseProfile","viewBox","height","width","xmlns","d","onClick","postComments","document","getElementById","postId","style","display","postPermalink","Post","video","image","media","reddit_video","controls","src","fallback_url","domain","match","url","alt","onError","postCreated","title","text","PostId","postAuthor","PostPermalink","SubredditsSlice","subReddits","addSubreddit","push","changeActiveSubreddit","SubredditsDropdown","subs","activeSub","onOptionSelected","sub","PostsContainer","activeSearchInput","postsArray","posts","filteredPosts","filter","toLowerCase","includes","selftext","imgSrc","num_comments","PostName","Subreddits","forEach","item","display_name","icon","community_icon","split","undefined","logo","PostsContainerSlice","changePosts","App","redditlogo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","StrictMode","store"],"mappings":"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","file":"static/js/main.4f1b332d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst SearchBarSlice = createSlice({\r\n    name: 'search',\r\n    initialState: '',\r\n    reducers: {\r\n        changeActiveSearch: (state, action) => state = action.payload,\r\n    }\r\n});\r\n\r\nexport const { changeActiveSearch } = SearchBarSlice.actions;\r\nexport default SearchBarSlice.reducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './SearchBar.css';\r\n\r\nimport { changeActiveSearch } from './SearchBarSlice';\r\n\r\nconst SearchBar = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const searchBarValue = useSelector(state => state.search);\r\n    const activeSubSliced = useSelector(state => state.subreddits.activeSubreddit).slice(3, -1);\r\n\r\n    const handleChange = (e) => {\r\n        dispatch(changeActiveSearch(e.target.value));\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id='searchbardiv'>\r\n            <input className=\"searchBar\"\r\n                id=\"Search\"\r\n                value={searchBarValue}\r\n                placeholder={\"Search posts in \" + activeSubSliced}\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","export const API_ROOT = 'https://www.reddit.com';\r\n\r\nexport const getSubredditPosts = async (subreddit) => {\r\n    const response = await fetch(`${API_ROOT}${subreddit}.json`);\r\n    const json = await response.json();\r\n\r\n    return json.data.children.map((post) => post.data);\r\n};\r\n\r\nexport const getSubreddits = async () => {\r\n    const response = await fetch(`${API_ROOT}/subreddits.json`);\r\n    const json = await response.json();\r\n\r\n    return json.data.children.map((subreddit) => subreddit.data);\r\n};\r\n\r\nexport const getPostComments = async (permalink) => {\r\n    const response = await fetch(`${API_ROOT}${permalink}.json`);\r\n    const json = await response.json();\r\n\r\n    return json[1].data.children.map((comment) => comment.data);\r\n};","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport './Comments.css';\r\n\r\nimport { getPostComments } from '../../app/Reddit';\r\nimport { dateCalculator } from '../PostFooter/PostFooter';\r\n\r\nexport const Comments = (props) => {\r\n  const [comments, setComments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getPostComments(props.permalink)\r\n      .then(jsonComments => setComments(\r\n        jsonComments.map(comment => (\r\n\r\n          <div className=\"comment\" key={comment.id}>\r\n            <div className='commentHeader'>\r\n              <p className='commentAuthor'>{comment.author}</p>\r\n              <p className='commentDate'>{dateCalculator(comment.created_utc)}</p>\r\n            </div>\r\n            <p>{comment.body}</p>\r\n          </div>\r\n\r\n        ))));\r\n  }, [props.permalink]);\r\n\r\n  return (\r\n    <div id={props.id} className={props.visible === true ? 'isShown' : 'isNotShown'}>\r\n      {comments}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport { Comments } from '../Comments/Comments.js';\r\n\r\nimport './PostFooter.css';\r\n\r\nexport const dateCalculator = (created) => {\r\n  const currentDate = Date.now();\r\n  const postDate = new Date(created * 1000);\r\n\r\n  const dateDifferenceInTime = currentDate - postDate;\r\n\r\n  const dateDifferenceInMonths = dateDifferenceInTime / (1000 * 3600 * 24 * 30.4);\r\n  const dateDifferenceInDays = dateDifferenceInTime / (1000 * 3600 * 24);\r\n  const dateDifferenceInHours = dateDifferenceInTime / (1000 * 3600);\r\n  const dateDifferenceInMinutes = dateDifferenceInTime / (1000 * 60);\r\n\r\n  if (dateDifferenceInMonths > 12) {\r\n      return \"more than a year ago\";\r\n  } else if (dateDifferenceInMonths >= 1) {\r\n      return Math.round(dateDifferenceInMonths) + \" months ago\";\r\n  } else if (dateDifferenceInDays >= 1) {\r\n      return Math.round(dateDifferenceInDays) + \" days ago\";\r\n  } else if (dateDifferenceInHours >= 1) {\r\n      return Math.round(dateDifferenceInHours) + \" hours ago\";\r\n  } else if (dateDifferenceInMinutes >= 1) {\r\n      return Math.round(dateDifferenceInMinutes) + \" minutes ago\";\r\n  } else {\r\n      return \"less than a minute ago\";\r\n  }\r\n}\r\n\r\nexport const PostFooter = (props) => {\r\n  const [active, setActive] = useState(false);\r\n\r\n  const commentsIcon = <svg\r\n    stroke=\"currentColor\"\r\n    fill=\"currentColor\"\r\n    strokeWidth=\"0\"\r\n    version=\"1.2\"\r\n    baseProfile=\"tiny\"\r\n    viewBox=\"0 0 24 24\"\r\n    className=\"icon-action\"\r\n    height=\"1.5rem\"\r\n    width=\"1.5rem\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M18 7c.542 0 1 .458 1 1v7c0 .542-.458 1-1 1h-8.829l-.171.171v-.171h-3c-.542 0-1-.458-1-1v-7c0-.542.458-1 1-1h12m0-2h-12c-1.65 0-3 1.35-3 3v7c0 1.65 1.35 3 3 3h1v3l3-3h8c1.65 0 3-1.35 3-3v-7c0-1.65-1.35-3-3-3z\"></path>\r\n  </svg>;\r\n\r\n  const onCommentsClicked = () => {\r\n    const postComments = document.getElementById(props.postId);\r\n    if (active) {\r\n      postComments.style.display = 'none';\r\n      setActive(false);\r\n    } else {\r\n      postComments.style.display = 'block';\r\n      setActive(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <footer>\r\n      <ul className='postInfos'>\r\n        <li onClick={onCommentsClicked} className='commentsIcon'>{commentsIcon}&nbsp;{props.postComments}</li>\r\n      </ul>\r\n      <Comments permalink={props.postPermalink}\r\n        id={props.postId}\r\n        visible={props.visible}\r\n      />\r\n    </footer>\r\n  );\r\n};","import React from 'react';\r\nimport './Post.css';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport { PostFooter } from '../PostFooter/PostFooter';\r\n\r\nconst Post = (props) => {\r\n\r\n    const dateCalculator = (created) => {\r\n        const currentDate = Date.now();\r\n        const postDate = new Date(created * 1000);\r\n    \r\n        const dateDifferenceInTime = currentDate - postDate;\r\n    \r\n        const dateDifferenceInMonths = dateDifferenceInTime / (1000 * 3600 * 24 * 30.4);\r\n        const dateDifferenceInDays = dateDifferenceInTime / (1000 * 3600 * 24);\r\n        const dateDifferenceInHours = dateDifferenceInTime / (1000 * 3600);\r\n        const dateDifferenceInMinutes = dateDifferenceInTime / (1000 * 60);\r\n    \r\n        if (dateDifferenceInMonths > 12) {\r\n            return \"more than a year ago\";\r\n        } else if (dateDifferenceInMonths >= 1) {\r\n            return Math.round(dateDifferenceInMonths) + \" months ago\";\r\n        } else if (dateDifferenceInDays >= 1) {\r\n            return Math.round(dateDifferenceInDays) + \" days ago\";\r\n        } else if (dateDifferenceInHours >= 1) {\r\n            return Math.round(dateDifferenceInHours) + \" hours ago\";\r\n        } else if (dateDifferenceInMinutes >= 1) {\r\n            return Math.round(dateDifferenceInMinutes) + \" minutes ago\";\r\n        } else {\r\n            return \"less than a minute ago\";\r\n        }\r\n    }\r\n\r\n    let video = '';\r\n    let image = '';\r\n\r\n    if (props.media) {\r\n        if (props.media.reddit_video) {\r\n            video = <video controls width=\"100%\"><source src={props.media.reddit_video.fallback_url} /></video>\r\n        } else if (props.domain.match(/yout/)) {\r\n            video = <ReactPlayer url={props.url} controls width=\"100%\" />\r\n        } else if (props.domain.match(/vimeo/)) {\r\n            video = <ReactPlayer url={props.url} controls width=\"100%\" />\r\n        }\r\n    }\r\n\r\n    if (props.url.match(/.png|.jpg|.jpeg|v.redd/)) {\r\n        image = <img src={props.url} alt=\"\" onError={(e) => e.target.style.display = \"none\"} />\r\n    }\r\n\r\n    return (\r\n        <div className=\"Post\">\r\n            <p className=\"PostUser\">\r\n                <strong>r/{props.subreddit}</strong> - posted by u/{props.author} - {dateCalculator(props.postCreated)}\r\n            </p>\r\n            <h2>{props.title}</h2>\r\n            <p>{props.text}</p>\r\n            {image ? image : null}\r\n            {video ? video : null}\r\n            <PostFooter postId={props.PostId}\r\n                postAuthor={props.author}\r\n                postCreated={props.postCreated}\r\n                postPermalink={props.PostPermalink}\r\n                postComments={props.postComments}\r\n                visible={false}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst SubredditsSlice = createSlice({\r\n    name: 'subreddits',\r\n    initialState: {\r\n        subReddits: [],\r\n        activeSubreddit: \"/r/Home/\"\r\n    },\r\n    reducers: {\r\n        addSubreddit: (state, action) => {\r\n            state.subReddits.push(action.payload);\r\n        },\r\n        changeActiveSubreddit: (state, action) => {\r\n            state.activeSubreddit = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addSubreddit, changeActiveSubreddit } = SubredditsSlice.actions;\r\nexport default SubredditsSlice.reducer;","import React, { useState, useEffect } from 'react';\r\nimport './SubredditsDropdown.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeActiveSubreddit } from '../Subreddits/SubredditsSlice';\r\n\r\nexport const SubredditsDropdown = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n  const subReddits = useSelector(state => state.subreddits.subReddits);\r\n\r\n  const onOptionSelected = (e) => {\r\n    dispatch(changeActiveSubreddit(e.target.value));\r\n  };\r\n\r\n  const dropdown = (subs) => {\r\n    return (\r\n      <select \r\n        className='subSelector'\r\n        value={activeSub}\r\n        onChange={onOptionSelected}\r\n      >\r\n        {subs.map(sub => (\r\n          <option key={sub.id} value={sub.url}>{sub.name}</option>\r\n        ))}\r\n      </select>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"subredditsdrop\">\r\n      {dropdown(subReddits)}\r\n    </section>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport './PostsContainer.css';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Post from '../Post/Post';\r\nimport { SubredditsDropdown } from '../SubredditsDropdown/SubredditsDropdown';\r\n\r\nconst PostsContainer = () => {\r\n\r\n    const activeSearchInput = useSelector(state => state.search);\r\n    const postsArray = useSelector(state => state.posts);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const filteredPosts = postsArray.filter(post => post.title.toLowerCase().includes(activeSearchInput.toLowerCase()));\r\n\r\n    return (\r\n        <div className=\"PostsContainer\">\r\n            <SubredditsDropdown />\r\n            {filteredPosts.map(post => (\r\n                <Post \r\n                    title={post.title}\r\n                    text={post.selftext}\r\n                    imgSrc={post.url}\r\n                    author={post.author}\r\n                    postCreated={post.created_utc}\r\n                    postComments={post.num_comments}\r\n                    subreddit={post.subreddit}\r\n                    PostName={post.name}\r\n                    PostId={post.id}\r\n                    PostPermalink={post.permalink}\r\n                    media={post.media}\r\n                    domain={post.domain}\r\n                    url={post.url}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport '../Subreddits/Subreddits.css';\r\n\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getSubreddits } from '../../app/Reddit';\r\nimport { addSubreddit, changeActiveSubreddit } from './SubredditsSlice';\r\nimport { changeActiveSearch } from '../SearchBar/SearchBarSlice';\r\n\r\nconst Subreddits = (props) => {\r\n    const activeSub = useSelector(state => state.subreddits.activeSubreddit);\r\n    const subReddits = useSelector(state => state.subreddits.subReddits);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => getSubreddits().then(json => {\r\n        json.forEach(item => dispatch(\r\n            addSubreddit({\r\n                name: item.display_name,\r\n                url: item.url,\r\n                id: item.id,\r\n                icon: item.community_icon.split(\"?\")[0],\r\n            })\r\n        ));\r\n    }), [dispatch]);\r\n\r\n    return (\r\n        <section className=\"subreddits\">\r\n            <ul>\r\n                {subReddits.map(item => (\r\n\r\n                        <li \r\n                            onClick={() => {\r\n                                dispatch(changeActiveSubreddit(item.url));\r\n                                dispatch(changeActiveSearch(''));\r\n                            }}\r\n                            className={activeSub === item.url ? \"activeSubreddit\" : undefined}\r\n                        >\r\n                            <img src={item.icon} alt={\"\"} onError={(e) => e.target.src = props.logo} />\r\n                            {item.name}\r\n                        </li>\r\n\r\n                ))}\r\n            </ul>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Subreddits;","export default __webpack_public_path__ + \"static/media/redditlogo.b31490f4.png\";","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst PostsContainerSlice = createSlice({\r\n    name: 'posts',\r\n    initialState: [],\r\n    reducers: {\r\n        changePosts: (state, action) => state = action.payload,\r\n    }\r\n});\r\n\r\nexport default PostsContainerSlice.reducer;\r\nexport const { changePosts } = PostsContainerSlice.actions;","import './App.css';\nimport './normalize.css';\n\nimport React, { useEffect } from 'react';\n\nimport SearchBar from './components/SearchBar/SearchBar';\nimport PostsContainer from './components/PostsContainer/PostsContainer';\nimport Subreddits from './components/Subreddits/Subreddits';\n\nimport redditlogo from './redditlogo.png';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getSubredditPosts } from './app/Reddit';\nimport { changePosts } from './components/PostsContainer/PostsContainerSlice';\nimport { changeActiveSubreddit } from './components/Subreddits/SubredditsSlice';\n\n\n\nfunction App() {\n\n  const activeSub = useSelector(state => state.subreddits.activeSubreddit);\n  const dispatch = useDispatch();\n\n  useEffect(() => getSubredditPosts(activeSub)\n  .then(response => {\n    dispatch(changePosts(response));\n  }), [activeSub]);\n  \n  const onTitleClicked = () => {\n    dispatch(changeActiveSubreddit(\"/r/Home/\"));\n  }\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"header\">\n        <h1 \n          className=\"mainHeader\" \n          onClick={onTitleClicked}\n        >\n          reddit <span>minimal</span>\n        </h1>\n        <SearchBar className=\"searchBar\"/>\n      </header>\n      \n      <div className=\"mainWrapper\">\n        <Subreddits logo={redditlogo} />\n        <PostsContainer />\n      </div>\n\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport SearchBarSlice from '../components/SearchBar/SearchBarSlice';\r\nimport SubredditsSlice from '../components/Subreddits/SubredditsSlice';\r\nimport PostsContainerSlice from '../components/PostsContainer/PostsContainerSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        search: SearchBarSlice,\r\n        subreddits: SubredditsSlice,\r\n        posts: PostsContainerSlice,\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}